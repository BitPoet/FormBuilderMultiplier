<?php namespace ProcessWire;


/**
 * Dynamically multiply Fieldsets in FormBuilder forms.
 *
 * Adds a configuration option to fieldsets in FormBuilder that allows
 * users in the form to multiply the fields inside the fieldset, like
 * a lightweight repeater.
 *
 * You can optionally configure a limit too.
 *
 * Technical description:
 * The original field names are suffixed with _NUM, where NUM is a number
 * starting from 1. The labels are suffixed accordingly too.
 *
 * (C) 2018 by BitPoet
 *
 * Licensed under MPL v2
 *
 */
class FormBuilderMultiplier extends WireData implements Module {

	public static function getModuleInfo() {
		return [
			'title'		=>	__("FormBuilder Fieldset Multiplier", __FILE__),
			'summary'	=>	__("Allows Repeater-like multiplying of fieldsets in FormBuilder forms in the frontend", __FILE__),
			'version'	=>	'0.0.5',
			'requires'	=>	array("FormBuilder"),
			'autoload'	=>	true,
		];
	}
	
	
	public function _construct() {
		parent::_construct();
		
		$this->set("editingField", false);
	}
	
	public function init() {
		$this->addHookBefore("ProcessFormBuilder::buildEditField", $this, "rememberEditingField");
		$this->addHookAfter("ProcessFormBuilder::buildEditField", $this, "forgetEditingField");
		$this->addHookAfter("InputfieldFieldset::getConfigInputfields", $this, "addMultiplierConfig");
		$this->addHookBefore("FormBuilderProcessor::renderReady", $this, "addMultipliedFieldsToProcessor");
		$this->addHookBefore("FormBuilderProcessor::populate", $this, "addMultipliedFieldsToPopulate");
		$this->addHookAfter("FormBuilderProcessor::processInputReady", $this, "addMultipliedFieldsToProcessInput");
		$this->addHookAfter("FormBuilderProcessor::render", $this, "appendJSConfig");
		$this->addHookAfter("FormBuilderProcessor::savePageDone", $this, "addMultipliedFieldsToPage");
		$this->addHookAfter('Page::render', $this, 'addScripts');
	}


    public function addScripts($event) {
		$page = $event->object; 
		if($page->template == 'admin') return;
        $additionalHeadScripts = '<script type="text/javascript" src="'.wire('config')->urls->siteModules.'FormBuilderMultiplier/FormBuilderMultiplier.js"></script>';
		$event->return = str_replace("</head>", $additionalHeadScripts.'</head>', $event->return); 
	}
	
	
	/**
	 * Hook after FormBuilderProcessor::render
	 * Appends configuration for the module script (mainly translations)
	 */
	public function appendJSConfig(HookEvent $event) {
		$jsconf = [
			"config" => [
				"messages" => [
					"rowlimit" => $this->_("Maximum number of rows ({0}) reached.")
				]
			]
		];
		
		$out .= "<script>var FBMultiplier = " . json_encode($jsconf) . ";</script>\n";
		
		$event->return .= $out;
	}
	
	/**
	 * Hook before ProcessFormBuilder::buildEditField, saves the currently
	 * editing field in the instance so the hook to InputfieldFieldset::getConfigInputfields
	 * can retrieve the configuration data from it.
	 */
	public function rememberEditingField(HookEvent $event) {
		$this->editingField = $event->arguments(0);
	}
	
	/**
	 * Hook after ProcessFormBuilder::buildEditField, removes the reference
	 * to the field being edited from the instance after config fields have
	 * been added.
	 */
	public function forgetEditingField(HookEvent $event) {
		$this->editingField = false;
	}
	
	/**
	 * Add config options for multiplier to fieldsets in the form editor
	 */
	public function addMultiplierConfig(HookEvent $event) {
		if($event->page->process == 'ProcessFormBuilder') {
			$f = $this->modules->get("InputfieldCheckbox");
			$f->attr('name', 'multiplyGroup');
			$f->label = $this->_("Multiply fields in this set " . rand(1000));
			if($this->editingField->multiplyGroup) $f->attr('checked', 'checked');
			$f->description = $this->_("If this box is checked, the user will be presented with a button that adds another set of the fields in this field group.") . " " .
							  $this->_("The field names for each set will get a numeric suffix (e.g. surname_1, surname_2, givenname_1, givenname_2 ...)")
			;

			$event->return->append($f);

			$f = $this->modules->get("InputfieldInteger");
			$f->attr('name', 'multiplyLimit');
			$f->label = $this->_("Multiplication limit");
			$f->attr('value', $this->editingField->multiplyLimit ?: 0);
			$f->description = $this->_("Limit the number of possibile multiplications of this fieldset's fields. 0 (default) means unlimited.");
			$f->showIf = "multiplyGroup=1";
			
			$event->return->append($f);
		}
	}


	/**
	 * Hook before FormBuilderProcessor::renderReady to add the necessary
	 * fiels and buttons to the form (used in frontend and for processing
	 * the form input.
	 */
	public function addMultipliedFieldsToProcessor(HookEvent $event) {
		$this->log->save('fbmultiplier', "addMultipliedFieldsToProcessor");
		//echo wire('config')->scripts->append(wire('config')->urls->FormBuilderMultiplier . "FormBuilderMultiplier.js?ts=" . strftime('%Y%m%d%H%M%S'));
		$this->log->save('fbmultiplier', "test");

		$form = $event->arguments(0);
		
		$multis = $form->find("className=InputfieldFieldset,multiplyGroup=1"); //FIND THE FIELDSET
		foreach($multis as $multi) {
			$this->log->save('fbmultiplier', "Found multiplier fieldset " . $multi->name);
			

			// ADD THE CLASS TO THE INPUT FIELD 
			// CHANGE THE LABEL TO INCLUDE THE COUNT. 
			$multi->children->each(function($child) {
				$child->addClass('fb-multiplier-orig-field');
				if($child->label) $child->label .= " [#1]";
			    if($child->name) $child->name .= "_1";
				//if($child->id) $child->id .= "_1";
				//echo $child->name;

			});
			
			$mname = $multi->name; //NAME OF THE FIELDSET
			$multiCount = $this->input->post->{$mname . "__multiplier_rows"} ?: 1; // COUNT THE CURRENT ROWS

			
			$children = $multi->children()->getArray();

			$hid = $this->modules->get("InputfieldHidden");
			$hid->attr('id+name', $mname . "__multiplier_rows");
			$hid->attr('data-multiply-limit', $multi->multiplyLimit);
			$hid->attr('value', $multiCount);
			$multi->insertBefore($hid, $multi->children->first());

			if($multiCount && $multiCount > 1) {
				for($c = 1; $c < $multiCount; $c++) {
					$this->cloneFields($children, $multi, $c);
				}
			}



			if(! $this->noButtons) {
				$btn = $this->modules->get("InputfieldMarkup");
				$classes = "uk-button uk-button-small uk-button-primary fb-multiplier-add-row";
				$btnname = "btn_multiy__$mname";
				$btn->attr('value', "<button class='$classes' name='$btnname' data-multiply='$mname' data-multiply-limit='" . intVal($multi->multiplyLimit) . "'>" . $this->_("Add row") . "</button>");
				$multi->append($btn);
			}


		    $this->log->save('fbmultiplier', "Finished the adjustments " . $multi->name);

		}		
	}
	
	/**
	 * Hook before FormBuilderProcessor::populate to add the necessary fields.
	 * Used when viewing already submitted data in the backend.
	 */
	protected function cloneFields($fields, $fieldgroup, $counter) {
		foreach($fields as $f) {
			$fNew = clone($f);
			$fNew->removeClass('fb-multiplier-orig-field');
			if($fNew->attr("id")) {
				$fNew->attr("id", preg_replace_callback('/^([^"]+_)(\d+)$/', function($match) use($counter) {
					$propVal = $match[1] . (intVal($match[2]) + $counter);
					return $propVal;
				}, $fNew->attr("id")));
			}
			if($fNew->attr("name")) {
				$fNew->attr("name", preg_replace_callback('/^([^"]+_)(\d+)$/', function($match) use($counter) {
					$propVal = $match[1] . (intVal($match[2]) + $counter);
					return $propVal;
				}, $fNew->attr("name")));
			}
			if($fNew->label) $fNew->label = preg_replace_callback('/ \[#(\d+)\]$/', function($match) use($counter) {
				$this->log->save('fbmultiplier', "Incrementing counter for label from " . $match[1] . " by " . $counter);
				return " [#" . (intVal($match[1]) + $counter) . "]";
			}, $fNew->label);
			$fieldgroup->append($fNew);
		}
	}
	
	
	public function addMultipliedFieldsToPopulate(HookEvent $event) {
		$this->log->save('fbmultiplier', "addMultipliedFieldsToPopulate");

		$proc = $event->object;
		$form = $proc->getInputfieldsForm();
		$data = $event->arguments(0);
		
		$multis = $form->find("className=InputfieldFieldset,multiplyGroup=1");
		
		foreach($multis as $multi) {
			$mname = $multi->name;
			$multiCount = isset($data[$mname . "__multiplier_rows"]) ? $data[$mname . "__multiplier_rows"] : 1;
			
			$multi->children->each(function($child) {
				$child->addClass('fb-multiplier-orig-field');
				if($child->label) $child->label .= " [#1]";
				if($child->name) $child->name .= "_1";
			});
						
			$children = $multi->children()->getArray();
			//print_r($children);

			$hid = $this->modules->get("InputfieldHidden");
			$hid->attr('id+name', $mname . "__multiplier_rows");
			$hid->attr('data-multiplier-limit', $multi->multiplyLimit);
			$hid->attr('value', $multiCount);
			$hid->label = _("Number of rows");
			$multi->insertBefore($hid, $multi->children->first());

			if($multiCount && $multiCount > 1) {
				for($c = 1; $c < $multiCount; $c++) {
					$this->cloneFields($children, $multi, $c);
				}
			}

		}
	}
	
	/**
	 * Hook after FormBuilderProcessor::processInputReady to add the multiplied
	 * fields before the POST values are processed. Uses the same logic as
	 * the hook to FormBuilderProcessor::renderReady, with the expception of
	 * the multiplier button. So a flag is set to skip these buttons.
	 */
	public function addMultipliedFieldsToProcessInput(HookEvent $event) {
		$form = $event->arguments(0);
		
		$this->noButtons = true;
		$this->addMultipliedFieldsToProcessor($event);
		$this->noButtons = false;
	}



	public function addMultipliedFieldsToPage(HookEvent $event) {

		$form = $event->object->getInputfieldsForm(); 
		$page = $event->arguments(0); // page that was saved
		$data = $event->arguments(1); // assoc array of data that was in the form
		$multis = $form->find("className=InputfieldFieldset,multiplyGroup=1"); //FIND THE FIELDSET
		$sanitizer = $this->wire('sanitizer');

		foreach($multis as $multi) {
		
			$mname = $multi->name; //NAME OF THE FIELDSET
			$multiCount = $this->input->post->{$mname . "__multiplier_rows"} ?: 1; // COUNT THE CURRENT ROWS

			for($c = 1; $c <= $multiCount; $c++) { //ITERATE THROUGH THE REPEATER ROW
				${$repFields.'_'.$c} = array();//CREATE AN ARRAY OF 1 REPEATER ROW
 
				foreach ($data as $key => $value) { //ADD THE REPEATER ROW TO THE ARRAY
		            if(strpos($key,'_'.$c)!==false){
		            	$newkey = str_replace('_'.$c, '', $key);//REMOVE THE _COUNT
				        ${$repFields.'_'.$c}[$newkey] = $sanitizer->entities($value); // ADD TO NEW ARRAY
				    }
				}
			//ENTER THEN INTO THE PAGE
                $rep = $page->$mname->getNew(); //OPEN THE REPEATER
		            foreach(${$repFields.'_'.$c} as $k => $v){ //ITTERATE THROUGH THE ARRAY
		            	$rep->$k = $v;
		            }
                $rep->save(); //SAVE THE REPEATER
			} //END FOR
			

		}
		
	}
	
}
